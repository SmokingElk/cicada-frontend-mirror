/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Auth API
 * API –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * OpenAPI spec version: 1.0
 */
import axios from 'axios';
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  DocsAccessRequest,
  DocsForgotPasswordRequest,
  DocsLoginRequest,
  DocsRefreshRequest,
  DocsRegisterRequest,
  DocsResetPasswordRequest,
  DocsSuccessResponseWithoutData,
  GetAuthMe200,
  PostAuthConfirmAccountParams,
  PostAuthLogin200,
  PostAuthRefresh200,
  PostAuthRegister200,
  PostAuthResetPasswordParams
} from './auth.schemas';




  export const getAuthAPI = () => {
/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∑–∞–¥–∞–Ω–Ω–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–∏
 * @summary –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
 */
const postAuthAccess = <TData = AxiosResponse<DocsSuccessResponseWithoutData>>(
    docsAccessRequest: DocsAccessRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `https://cicada-chess.ru:8081/auth/access`,
      docsAccessRequest,options
    );
  }

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ access-—Ç–æ–∫–µ–Ω–∞
 * @summary –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
 */
const getAuthCheck = <TData = AxiosResponse<DocsSuccessResponseWithoutData>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `https://cicada-chess.ru:8081/auth/check`,options
    );
  }

/**
 * –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É
 * @summary –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
 */
const postAuthConfirmAccount = <TData = AxiosResponse<DocsSuccessResponseWithoutData>>(
    params: PostAuthConfirmAccountParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `https://cicada-chess.ru:8081/auth/confirm-account`,undefined,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞
 * @summary –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
 */
const postAuthForgotPassword = <TData = AxiosResponse<DocsSuccessResponseWithoutData>>(
    docsForgotPasswordRequest: DocsForgotPasswordRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `https://cicada-chess.ru:8081/auth/forgot-password`,
      docsForgotPasswordRequest,options
    );
  }

/**
 * –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–¥–∞—ë—Ç JWT-—Ç–æ–∫–µ–Ω—ã
 * @summary –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
const postAuthLogin = <TData = AxiosResponse<PostAuthLogin200>>(
    docsLoginRequest: DocsLoginRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `https://cicada-chess.ru:8081/auth/login`,
      docsLoginRequest,options
    );
  }

/**
 * –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
const getAuthLogout = <TData = AxiosResponse<DocsSuccessResponseWithoutData>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `https://cicada-chess.ru:8081/auth/logout`,options
    );
  }

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ access-—Ç–æ–∫–µ–Ω—É
 */
const getAuthMe = <TData = AxiosResponse<GetAuthMe200>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `https://cicada-chess.ru:8081/auth/me`,options
    );
  }

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç access-—Ç–æ–∫–µ–Ω —Å –ø–æ–º–æ—â—å—é refresh-—Ç–æ–∫–µ–Ω–∞
 * @summary –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
 */
const postAuthRefresh = <TData = AxiosResponse<PostAuthRefresh200>>(
    docsRefreshRequest: DocsRefreshRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `https://cicada-chess.ru:8081/auth/refresh`,
      docsRefreshRequest,options
    );
  }

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
const postAuthRegister = <TData = AxiosResponse<PostAuthRegister200>>(
    docsRegisterRequest: DocsRegisterRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `https://cicada-chess.ru:8081/auth/register`,
      docsRegisterRequest,options
    );
  }

/**
 * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
 * @summary –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
 */
const postAuthResetPassword = <TData = AxiosResponse<DocsSuccessResponseWithoutData>>(
    docsResetPasswordRequest: DocsResetPasswordRequest,
    params: PostAuthResetPasswordParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `https://cicada-chess.ru:8081/auth/reset-password`,
      docsResetPasswordRequest,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

return {postAuthAccess,getAuthCheck,postAuthConfirmAccount,postAuthForgotPassword,postAuthLogin,getAuthLogout,getAuthMe,postAuthRefresh,postAuthRegister,postAuthResetPassword}};
export type PostAuthAccessResult = AxiosResponse<DocsSuccessResponseWithoutData>
export type GetAuthCheckResult = AxiosResponse<DocsSuccessResponseWithoutData>
export type PostAuthConfirmAccountResult = AxiosResponse<DocsSuccessResponseWithoutData>
export type PostAuthForgotPasswordResult = AxiosResponse<DocsSuccessResponseWithoutData>
export type PostAuthLoginResult = AxiosResponse<PostAuthLogin200>
export type GetAuthLogoutResult = AxiosResponse<DocsSuccessResponseWithoutData>
export type GetAuthMeResult = AxiosResponse<GetAuthMe200>
export type PostAuthRefreshResult = AxiosResponse<PostAuthRefresh200>
export type PostAuthRegisterResult = AxiosResponse<PostAuthRegister200>
export type PostAuthResetPasswordResult = AxiosResponse<DocsSuccessResponseWithoutData>
